version: '3.8'

services:
  # Node.js 应用服务
  nodejs:
    build: .
    container_name: node_app
    restart: unless-stopped
    ports:
      - "3000:3000" # 根据实际应用端口修改
      - "9229:9229" # debug port
    environment:
      - NODE_ENV=production
      - DATABASE_URL=postgres://postgres_user:postgres_password%54088@postgres:5432/postgres_db
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin%54088
      - MINIO_BUCKET_NAME=mybucket
    depends_on:
      postgres:
        condition: service_healthy
      minio:
        condition: service_started
    networks:
      - app-network

  # MinIO 对象存储服务
  minio:
    image: quay.io/minio/minio
    container_name: minio
    command: server /data --console-address ":9001"
    ports:
      - "9000:9000" # API 端口
      - "9001:9001" # 控制台端口
    environment:
      - MINIO_ROOT_USER=minioadmin
      - MINIO_ROOT_PASSWORD=minioadmin%54088
    volumes:
      - minio-data:/data
    networks:
      - app-network

  # PostgreSQL 数据库服务
  postgres:
    image: postgres:15-alpine
    container_name: postgres
    restart: unless-stopped
    environment:
      - POSTGRES_USER=postgres_user
      - POSTGRES_PASSWORD=postgres_password%54088
      - POSTGRES_DB=postgres_db
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./init.sql:/docker-entrypoint-initdb.d/init.sql # 初始化脚本（可选）
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres_user -d postgres_db"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - app-network

volumes:
  postgres-data:
  minio-data:

networks:
  app-network:
    driver: bridge